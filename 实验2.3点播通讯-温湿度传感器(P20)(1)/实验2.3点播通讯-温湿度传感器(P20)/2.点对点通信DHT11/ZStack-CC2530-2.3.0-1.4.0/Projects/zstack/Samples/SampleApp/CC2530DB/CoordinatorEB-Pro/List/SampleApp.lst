###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         07/Nov/2024  15:11:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P2 #
#                          0)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ #
#                          ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ #
#                          Samples\SampleApp\Source\SampleApp.c               #
#    Command line       =  -f "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ #
#                          ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶Ô #
#                          µãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg" (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x01000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\Source\SampleApp.c" -D          #
#                          ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC  #
#                          -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC         #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List #
#                          \" -lA "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´ #
#                          «¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2. #
#                          µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ #
#                          " -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ #
#                          ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶Ô #
#                          µãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\" -I                #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\SOURCE\" -I         #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530D #
#                          B\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´ #
#                          «¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2. #
#                          µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MT\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥ #
#                          Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´« #
#                          ¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I            #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\HAL\TARGET\CC2530EB\" -I                       #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\" -I "D:\14651\Documents\ÊµÑé2. #
#                          3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I      #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\AF\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥Í #
#                          ¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ #
#                          ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\NWK\" -I               #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SEC\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥ #
#                          Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´« #
#                          ¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\" -I             #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SYS\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥ #
#                          Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´« #
#                          ¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\ZDO\" -I              #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\ZMAC\F8W\" -I "D:\14651\Documents\ÊµÑé2.3µã²¥Í #
#                          ¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ #
#                          ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\ZMAC\" -I                    #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\SERVICES\SADDR\" -I "D:\14651\Documents\ÊµÑé2. #
#                          3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I    #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\INCLUDE\" -I "D:\14651\Documents\ÊµÑé2.3µã #
#                          ²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È #
#                          ´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I       #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\LOW_LEVEL\srf04\" -I                       #
#                          "D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P #
#                          20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ #
#                          ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz         #
#                          --require_prototypes                               #
#    List file          =  D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P2 #
#                          0)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ #
#                          ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\ #
#                          SampleApp.lst                                      #
#    Object file        =  D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P2 #
#                          0)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ #
#                          ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\S #
#                          ampleApp.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\14651\Documents\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)(1)\ÊµÑé2.3µã²¥Í¨Ñ¶-ÎÂÊª¶È´«¸ÐÆ÷(P20)\2.µã¶ÔµãÍ¨ÐÅDHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          uint8 num = 0;
   \                     num:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     98          {
     99            SAMPLEAPP_PERIODIC_CLUSTERID,
    100            SAMPLEAPP_FLASH_CLUSTERID
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    153          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          void SampleApp_SendPeriodicMessage( void );
    155          void SampleApp_SendFlashMessage( uint16 flashTime );
    156          void SampleApp_Send_P2P_Message(void);
    157          /*********************************************************************
    158           * NETWORK LAYER CALLBACKS
    159           */
    160          
    161          /*********************************************************************
    162           * PUBLIC FUNCTIONS
    163           */
    164          
    165          /*********************************************************************
    166           * @fn      SampleApp_Init
    167           *
    168           * @brief   Initialization function for the Generic App Task.
    169           *          This is called during initialization and should contain
    170           *          any application specific initialization (ie. hardware
    171           *          initialization/setup, table initialization, power up
    172           *          notificaiton ... ).
    173           *
    174           * @param   task_id - the ID assigned by OSAL.  This ID should be
    175           *                    used to send messages and set timers.
    176           *
    177           * @return  none
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    180          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    181            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    182            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    183            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    184            
    185            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    186            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    187            P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001E   53F37F       ANL     0xf3,#0x7f
    188            
    189            // Device hardware initialization can be added here or in main() (Zmain.c).
    190            // If the hardware is application specific - add it here.
    191            // If the hardware is other parts of the device add it in main().
    192          
    193           #if defined ( BUILD_ALL_DEVICES )
    194            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    195            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    196            // together - if they are - we will start up a coordinator. Otherwise,
    197            // the device will start as a router.
    198            if ( readCoordinatorJumper() )
    199              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    200            else
    201              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    202          #endif // BUILD_ALL_DEVICES
    203          
    204          #if defined ( HOLD_AUTO_START )
    205            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    206            //  from starting the device and wait for the application to
    207            //  start the device.
    208            ZDOInitDevice(0);
    209          #endif
    210          
    211            // Setup for the periodic message's destination address
    212            // Broadcast to everyone
    213            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    214            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    215            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    216          
    217            // Setup for the flash command's destination address - Group 1
    218            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    219            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    220            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    221            
    222            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000046   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    223            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    224            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000050   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    225          
    226            // Fill out the endpoint description.
    227            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000057   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    228            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.simpleDesc
    230                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    231            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006D   A3           INC     DPTR
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    232          
    233            // Register the endpoint description with the AF
    234            afRegister( &SampleApp_epDesc );
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000072   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   12....       LCALL   ??afRegister?relay
    235          
    236            // Register for all key events - This app will handle all key events
    237            RegisterForKeys( SampleApp_TaskID );
   \   000077                ; Setup parameters for call to function RegisterForKeys
   \   000077   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??RegisterForKeys?relay
    238          
    239            // By default, all devices start out in Group 1
    240            SampleApp_Group.ID = 0x0001;
   \   00007F   90....       MOV     DPTR,#SampleApp_Group
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    241            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008E   F5..         MOV     ?V0 + 2,A
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C07         MOV     R4,#0x7
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009B   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009D   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    242            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A3                ; Setup parameters for call to function aps_AddGroup
   \   0000A3   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A5   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A7   7914         MOV     R1,#0x14
   \   0000A9   12....       LCALL   ??aps_AddGroup?relay
    243          
    244          #if defined ( LCD_SUPPORTED )
    245            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AC                ; Setup parameters for call to function HalLcdWriteString
   \   0000AC   7901         MOV     R1,#0x1
   \   0000AE   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B0   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B2   12....       LCALL   ??HalLcdWriteString?relay
    246          #endif
    247          }
   \   0000B5                REQUIRE ?Subroutine0
   \   0000B5                REQUIRE P0SEL
   \   0000B5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    248          
    249          /*********************************************************************
    250           * @fn      SampleApp_ProcessEvent
    251           *
    252           * @brief   Generic Application Task event processor.  This function
    253           *          is called to process all events for the task.  Events
    254           *          include timers, messages and any other user defined events.
    255           *
    256           * @param   task_id  - The OSAL assigned task ID.
    257           * @param   events - events to process.  This is a bit map and can
    258           *                   contain more than one event.
    259           *
    260           * @return  none
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    263          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    264            afIncomingMSGPacket_t *MSGpkt;
    265            (void)task_id;  // Intentionally unreferenced parameter
    266          
    267            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    268            {
    269              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    270              while ( MSGpkt )
    271              {
    272                switch ( MSGpkt->hdr.event )
    273                {
    274                  // Received when a key is pressed
    275                  case KEY_CHANGE:
    276                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    277                    break;
    278          
    279                  // Received when a messages is received (OTA) for this endpoint
    280                  case AF_INCOMING_MSG_CMD:
    281                    SampleApp_MessageMSGCB( MSGpkt );
    282                    break;
    283          
    284                  // Received whenever the device changes state in the network
    285                  case ZDO_STATE_CHANGE:
    286                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    287                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    288                           (SampleApp_NwkState == DEV_ROUTER)
    289                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    290                    {
    291                      // Start sending the periodic message in a regular interval.
    292                      osal_start_timerEx( SampleApp_TaskID,
    293                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    294                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CB8         MOV     R4,#-0x48
   \   000020   7D0B         MOV     R5,#0xb
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    295                    }
    296                    else
    297                    {
    298                      // Device is no longer in the network
    299                    }
    300                    break;
    301          
    302                  default:
    303                    break;
    304                }
    305          
    306                // Release the memory
    307                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    308          
    309                // Next - if one is available
    310                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    311              }
    312          
    313              // return unprocessed events
    314              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   803F         SJMP    ??SampleApp_ProcessEvent_9
    315            }
    316          
    317            // Send a message out - This event is generated by a timer
    318            //  (setup in SampleApp_Init()).
    319            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5036         JNC     ??SampleApp_ProcessEvent_10
    320            {
    321              // Send the periodic message
    322              //SampleApp_SendPeriodicMessage();
    323              if(num == 1)  
   \   000086   90....       MOV     DPTR,#num
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6401         XRL     A,#0x1
   \   00008C   700D         JNZ     ??SampleApp_ProcessEvent_11
    324              {
    325                
    326                HalUARTWrite(0, "send\r\n", 8);  
   \   00008E                ; Setup parameters for call to function HalUARTWrite
   \   00008E   7C08         MOV     R4,#0x8
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A..         MOV     R2,#`?<Constant "send\\r\\n">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "send\\r\\n">` >> 8) & 0xff
   \   000096   7900         MOV     R1,#0x0
   \   000098   12....       LCALL   ??HalUARTWrite?relay
    327              }
    328                
    329              SampleApp_Send_P2P_Message();
   \                     ??SampleApp_ProcessEvent_11:
   \   00009B                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00009B   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    330              // Setup to send message again in normal period (+ a little jitter)
    331              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    332                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009E                ; Setup parameters for call to function osal_rand
   \   00009E   12....       LCALL   ??osal_rand?relay
   \   0000A1                ; Setup parameters for call to function osal_start_timerEx
   \   0000A1   EA           MOV     A,R2
   \   0000A2   24B8         ADD     A,#-0x48
   \   0000A4   FC           MOV     R4,A
   \   0000A5   E4           CLR     A
   \   0000A6   340B         ADDC    A,#0xb
   \   0000A8   FD           MOV     R5,A
   \   0000A9   7A01         MOV     R2,#0x1
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   ??osal_start_timerEx?relay
    333          
    334              // return unprocessed events
    335              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B5   EE           MOV     A,R6
   \   0000B6   6401         XRL     A,#0x1
   \   0000B8   FA           MOV     R2,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   80C2         SJMP    ??SampleApp_ProcessEvent_8
    336            }
    337          
    338            // Discard unknown events
    339            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BC   7A00         MOV     R2,#0x0
   \   0000BE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000C0                REQUIRE ?Subroutine1
   \   0000C0                ; // Fall through to label ?Subroutine1
    340          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * Event Generation Functions
    344           */
    345          /*********************************************************************
    346           * @fn      SampleApp_HandleKeys
    347           *
    348           * @brief   Handles all key events for this device.
    349           *
    350           * @param   shift - true if in shift/alt.
    351           * @param   keys - bit field for key events. Valid entries:
    352           *                 HAL_KEY_SW_2
    353           *                 HAL_KEY_SW_1
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    358          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    359            (void)shift;  // Intentionally unreferenced parameter
    360            
    361            if ( keys & HAL_KEY_SW_6 )
   \   000007   A2E5         MOV     C,0xE0 /* A   */.5
   \   000009   5013         JNC     ??SampleApp_HandleKeys_0
    362            {
    363              num = !num;
   \   00000B   90....       MOV     DPTR,#num
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7004         JNZ     ??SampleApp_HandleKeys_1
   \   000011   7401         MOV     A,#0x1
   \   000013   8001         SJMP    ??SampleApp_HandleKeys_2
   \                     ??SampleApp_HandleKeys_1:
   \   000015   E4           CLR     A
   \                     ??SampleApp_HandleKeys_2:
   \   000016   F0           MOVX    @DPTR,A
    364              /* This key sends the Flash Command is sent to Group 1.
    365               * This device will not receive the Flash Command from this
    366               * device (even if it belongs to group 1).
    367               */
    368              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   000017                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   000017   7AE8         MOV     R2,#-0x18
   \   000019   7B03         MOV     R3,#0x3
   \   00001B   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    369            }
    370          
    371            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   00001E   EE           MOV     A,R6
   \   00001F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000021   5024         JNC     ??SampleApp_HandleKeys_3
    372            {
    373              /* The Flashr Command is sent to Group 1.
    374               * This key toggles this device in and out of group 1.
    375               * If this device doesn't belong to group 1, this application
    376               * will not receive the Flash command sent to group 1.
    377               */
    378              aps_Group_t *grp;
    379              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    380              if ( grp )
   \   000023                ; Setup parameters for call to function aps_FindGroup
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7B00         MOV     R3,#0x0
   \   000027   7914         MOV     R1,#0x14
   \   000029   12....       LCALL   ??aps_FindGroup?relay
   \   00002C   8B..         MOV     ?V0 + 1,R3
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V0 + 1
   \   000031   600B         JZ      ??SampleApp_HandleKeys_4
    381              {
    382                // Remove from the group
    383                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000033                ; Setup parameters for call to function aps_RemoveGroup
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7914         MOV     R1,#0x14
   \   000039   12....       LCALL   ??aps_RemoveGroup?relay
   \   00003C   8009         SJMP    ??SampleApp_HandleKeys_3
    384              }
    385              else
    386              {
    387                // Add to the flash group
    388                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_4:
   \   00003E                ; Setup parameters for call to function aps_AddGroup
   \   00003E   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000040   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000042   7914         MOV     R1,#0x14
   \   000044   12....       LCALL   ??aps_AddGroup?relay
    389              }
    390            }
    391          }
   \                     ??SampleApp_HandleKeys_3:
   \   000047   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    392          
    393          /*********************************************************************
    394           * LOCAL FUNCTIONS
    395           */
    396          
    397          /*********************************************************************
    398           * @fn      SampleApp_MessageMSGCB
    399           *
    400           * @brief   Data message processor callback.  This function processes
    401           *          any incoming data - probably from other devices.  So, based
    402           *          on cluster ID, perform the intended action.
    403           *
    404           * @param   none
    405           *
    406           * @return  none
    407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    409          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    410            uint16 flashTime;
    411          
    412            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    413            {
    414              case SAMPLEAPP_P2P_CLUSTERID:
    415                HalUARTWrite(0, "T&H:", 4);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C04         MOV     R4,#0x4
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    416                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   00003F                ; Setup parameters for call to function HalUARTWrite
   \   00003F   EE           MOV     A,R6
   \   000040   241F         ADD     A,#0x1f
   \   000042   F582         MOV     DPL,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FD           MOV     R5,A
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   ?Subroutine3 & 0xFFFF
    417                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
    418                break;    
   \                     ??CrossCallReturnLabel_0:
   \   00005C   8037         SJMP    ??SampleApp_MessageMSGCB_0
    419              case SAMPLEAPP_PERIODIC_CLUSTERID:
    420                break;
    421          
    422              case SAMPLEAPP_FLASH_CLUSTERID:
    423                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    424                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069                ; Setup parameters for call to function HalLedBlink
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   EA           MOV     A,R2
   \   000079   2400         ADD     A,#0x0
   \   00007B   F5..         MOV     ?V0 + 0,A
   \   00007D   E4           CLR     A
   \   00007E   39           ADDC    A,R1
   \   00007F   F5..         MOV     ?V0 + 1,A
   \   000081   7402         MOV     A,#0x2
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?US_SHR
   \   000088   AC..         MOV     R4,?V0 + 0
   \   00008A   AD..         MOV     R5,?V0 + 1
   \   00008C   7B32         MOV     R3,#0x32
   \   00008E   7A04         MOV     R2,#0x4
   \   000090   7908         MOV     R1,#0x8
   \   000092   12....       LCALL   ??HalLedBlink?relay
    425                break;
    426            }
    427          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000095   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    428          
    429          /*********************************************************************
    430           * @fn      SampleApp_SendPeriodicMessage
    431           *
    432           * @brief   Send the periodic message.
    433           *
    434           * @param   none
    435           *
    436           * @return  none
    437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    439          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    440            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    441                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    442                                 1,
    443                                 (uint8*)&SampleAppPeriodicCounter,
    444                                 &SampleApp_TransID,
    445                                 AF_DISCV_ROUTE,
    446                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042                REQUIRE ?Subroutine2
   \   000042                ; // Fall through to label ?Subroutine2
    447            {
    448            }
    449            else
    450            {
    451              // Error occurred in request to send.
    452            }
    453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0
    454          
    455          /*********************************************************************
    456           * @fn      SampleApp_SendFlashMessage
    457           *
    458           * @brief   Send the flash message to group 1.
    459           *
    460           * @param   flashTime - in milliseconds
    461           *
    462           * @return  none
    463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    464          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    465          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    466            uint8 buffer[3];
    467            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    468            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    469            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    470          
    471            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    472                                 SAMPLEAPP_FLASH_CLUSTERID,
    473                                 3,
    474                                 buffer,
    475                                 &SampleApp_TransID,
    476                                 AF_DISCV_ROUTE,
    477                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    478            {
    479            }
    480            else
    481            {
    482              // Error occurred in request to send.
    483            }
    484          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine2
    485          
    486          /*********************************************************************
    487           * @fn      SampleApp_Send_P2P_Message
    488           *
    489           * @brief   point to point.
    490           *
    491           * @param   none
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    496          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    497            byte i, temp[3], humidity[3], strTemp[7];
    498            Delay_ms(500);
   \   00000A                ; Setup parameters for call to function Delay_ms
   \   00000A   7AF4         MOV     R2,#-0xc
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   12....       LCALL   ??Delay_ms?relay
    499            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   000011                ; Setup parameters for call to function DHT11
   \   000011   12....       LCALL   ??DHT11?relay
    500            Delay_ms(500);
   \   000014                ; Setup parameters for call to function Delay_ms
   \   000014   7AF4         MOV     R2,#-0xc
   \   000016   7B01         MOV     R3,#0x1
   \   000018   12....       LCALL   ??Delay_ms?relay
    501            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    502            temp[0] = wendu_shi+0x30;
   \   00001B   90....       MOV     DPTR,#wendu_shi
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   2430         ADD     A,#0x30
   \   000021   C0E0         PUSH    A
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
    503            temp[1] = wendu_ge+0x30;
   \   00002B   90....       MOV     DPTR,#wendu_ge
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   2430         ADD     A,#0x30
   \   000031   C0E0         PUSH    A
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
    504            temp[2] = '\0';
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    505            humidity[0] = shidu_shi+0x30;
   \   000042   90....       MOV     DPTR,#shidu_shi
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2430         ADD     A,#0x30
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   F0           MOVX    @DPTR,A
    506            humidity[1] = shidu_ge+0x30;
   \   00004F   90....       MOV     DPTR,#shidu_ge
   \   000052   E0           MOVX    A,@DPTR
   \   000053   2430         ADD     A,#0x30
   \   000055   C0E0         PUSH    A
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
    507            humidity[2] = '\0';
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    508            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    509            osal_memcpy(strTemp, temp, 2); 
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   A982         MOV     R1,DPL
   \   00006D   AA83         MOV     R2,DPH
   \   00006F   89..         MOV     ?V0 + 0,R1
   \   000071   8A..         MOV     ?V0 + 1,R2
   \   000073   75..00       MOV     ?V0 + 2,#0x0
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007B   7C02         MOV     R4,#0x2
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    510            osal_memcpy(&strTemp[2], "  ", 2);
   \   00008A                ; Setup parameters for call to function osal_memcpy
   \   00008A   75....       MOV     ?V0 + 0,#`?<Constant "  ">` & 0xff
   \   00008D   75....       MOV     ?V0 + 1,#(`?<Constant "  ">` >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C02         MOV     R4,#0x2
   \   000097   7D00         MOV     R5,#0x0
   \   000099   740B         MOV     A,#0xb
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    511            osal_memcpy(&strTemp[4], humidity, 3);
   \   0000A4                ; Setup parameters for call to function osal_memcpy
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   A982         MOV     R1,DPL
   \   0000AC   AA83         MOV     R2,DPH
   \   0000AE   89..         MOV     ?V0 + 0,R1
   \   0000B0   8A..         MOV     ?V0 + 1,R2
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B7   7C03         MOV     R4,#0x3
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   740D         MOV     A,#0xd
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
    512            
    513            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    514            HalUARTWrite(0, "T&H:", 4);
   \   0000C6                ; Setup parameters for call to function HalUARTWrite
   \   0000C6   7C04         MOV     R4,#0x4
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   0000CC   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   12....       LCALL   ??HalUARTWrite?relay
    515            HalUARTWrite(0, strTemp, 6);
   \   0000D3                ; Setup parameters for call to function HalUARTWrite
   \   0000D3   7C06         MOV     R4,#0x6
   \   0000D5   7D00         MOV     R5,#0x0
   \   0000D7   EC           MOV     A,R4
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF   12....       LCALL   ?Subroutine3 & 0xFFFF
    516            HalUARTWrite(0, "\n",1);
    517          
    518            //Êä³öµ½LCDÏÔÊ¾
    519            for(i=0; i<3; i++)
    520            {   
    521              if(i==0)
    522              {
    523                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??CrossCallReturnLabel_1:
   \   0000E2                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   7A04         MOV     R2,#0x4
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   12....       LCALL   ??LCD_P16x16Ch?relay
    524                LCD_P16x16Ch(i*16,6,(i+3)*16);
   \   0000EB                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000EB   7B30         MOV     R3,#0x30
   \   0000ED   7A06         MOV     R2,#0x6
   \   0000EF   7900         MOV     R1,#0x0
   \   0000F1   12....       LCALL   ??LCD_P16x16Ch?relay
    525              }
   \   0000F4   7F01         MOV     R7,#0x1
    526              else
    527              {
    528                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??SampleApp_Send_P2P_Message_0:
   \   0000F6   EF           MOV     A,R7
   \   0000F7   C4           SWAP    A
   \   0000F8   54F0         ANL     A,#0xf0
   \   0000FA   FE           MOV     R6,A
   \   0000FB                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000FB   FB           MOV     R3,A
   \   0000FC   7A04         MOV     R2,#0x4
   \   0000FE   F9           MOV     R1,A
   \   0000FF   12....       LCALL   ??LCD_P16x16Ch?relay
    529                LCD_P16x16Ch(i*16,6,i*16);        
   \   000102                ; Setup parameters for call to function LCD_P16x16Ch
   \   000102   EE           MOV     A,R6
   \   000103   FB           MOV     R3,A
   \   000104   7A06         MOV     R2,#0x6
   \   000106   F9           MOV     R1,A
   \   000107   12....       LCALL   ??LCD_P16x16Ch?relay
    530              }
    531            } 
   \   00010A   0F           INC     R7
   \   00010B   EF           MOV     A,R7
   \   00010C   C3           CLR     C
   \   00010D   9403         SUBB    A,#0x3
   \   00010F   40E5         JC      ??SampleApp_Send_P2P_Message_0
    532            LCD_P8x16Str(44, 4, temp);
   \   000111                ; Setup parameters for call to function LCD_P8x16Str
   \   000111   7403         MOV     A,#0x3
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   AC82         MOV     R4,DPL
   \   000118   AD83         MOV     R5,DPH
   \   00011A   7A04         MOV     R2,#0x4
   \   00011C   792C         MOV     R1,#0x2c
   \   00011E   12....       LCALL   ??LCD_P8x16Str?relay
    533            LCD_P8x16Str(44, 6, humidity);
   \   000121                ; Setup parameters for call to function LCD_P8x16Str
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   AC82         MOV     R4,DPL
   \   000129   AD83         MOV     R5,DPH
   \   00012B   7A06         MOV     R2,#0x6
   \   00012D   792C         MOV     R1,#0x2c
   \   00012F   12....       LCALL   ??LCD_P8x16Str?relay
    534           
    535            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    536                                 SAMPLEAPP_P2P_CLUSTERID,
    537                                 6,
    538                                 strTemp,
    539                                 &SampleApp_TransID,
    540                                 AF_DISCV_ROUTE,
    541                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000132                ; Setup parameters for call to function AF_DataRequest
   \   000132   75..1E       MOV     ?V0 + 0,#0x1e
   \   000135   78..         MOV     R0,#?V0 + 0
   \   000137   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013A   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00013D   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000140   78..         MOV     R0,#?V0 + 0
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000145   7409         MOV     A,#0x9
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   8582..       MOV     ?V0 + 0,DPL
   \   00014D   8583..       MOV     ?V0 + 1,DPH
   \   000150   78..         MOV     R0,#?V0 + 0
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000155   75..06       MOV     ?V0 + 0,#0x6
   \   000158   75..00       MOV     ?V0 + 1,#0x0
   \   00015B   78..         MOV     R0,#?V0 + 0
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   75..04       MOV     ?V0 + 0,#0x4
   \   000163   78..         MOV     R0,#?V0 + 0
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000168   7920         MOV     R1,#0x20
   \   00016A   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00016C   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00016E   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000170   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000172   12....       LCALL   ??AF_DataRequest?relay
   \   000175   7409         MOV     A,#0x9
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
    542            {
    543            }
    544            else
    545            {
    546              // Error occurred in request to send.
    547            }
    548          }
   \   00017A   740D         MOV     A,#0xd
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "send\\r\\n">`:
   \   000000   73656E64     DB "send\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "
    549          /*********************************************************************
    550          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> HalUARTWrite                  0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     45
       -> Delay_ms                      0      0     48
       -> DHT11                         0      0     48
       -> Delay_ms                      0      0     48
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P8x16Str                  0      0     48
       -> LCD_P8x16Str                  0      0     48
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P0SEL                                    1
     num                                      1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         181
     ?Subroutine0                             5
     ??Subroutine6_0                          6
     SampleApp_ProcessEvent                 192
     ?Subroutine1                             5
     SampleApp_HandleKeys                    74
     ??Subroutine5_0                          5
     SampleApp_MessageMSGCB                 152
     ?Subroutine3                            19
     SampleApp_SendPeriodicMessage           66
     ?Subroutine2                             3
     SampleApp_SendFlashMessage             117
     SampleApp_Send_P2P_Message             386
     ?Subroutine4                             4
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "send\r\n">                   7
     ?<Constant "T&H:">                       5
     ?<Constant "\n">                         2
     ?<Constant "  ">                         3

 
 1 215 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    51 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 1 257 bytes of CODE  memory
    51 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    66 bytes of XDATA memory

Errors: none
Warnings: none
